name: rolling

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron:  '7 7 * * *'

# Spend CI time only on latest ref: https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # https://twitter.com/mycoliza/status/1571295690063753218
  # nightly:
  #   name: ubuntu / nightly
  #   steps:
  #     - name: Setup Tools
  #       shell: bash
  #       run: |
  #         sudo apt-get -qq update && \
  #         sudo apt-get -qq install --no-install-recommends -y curl unzip gcc g++ git
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: false
  #     - name: Install nightly
  #       uses: dtolnay/rust-toolchain@nightly
  #     - name: cargo generate-lockfile
  #       if: hashFiles('Cargo.lock') == ''
  #       run: cargo generate-lockfile
  #     - name: cargo test --locked
  #       run: cargo test --locked --all-features --all-targets
  # https://twitter.com/alcuadrado/status/1571291687837732873
  update:
    runs-on: ubuntu-latest
    name: ubuntu / beta / updated
    # There's no point running this if no Cargo.lock was checked in in the
    # first place, since we'd just redo what happened in the regular test job.
    # Unfortunately, hashFiles only works in if on steps, so we reepeat it.
    # if: hashFiles('Cargo.lock') != ''
    steps:
      - name: Setup Tools
        shell: bash
        run: |
          sudo apt-get -qq update && \
          sudo apt-get -qq install --no-install-recommends -y curl unzip gcc g++ git
      - uses: actions/checkout@v4
        with:
          submodules: false
      - name: Install beta
        if: hashFiles('Cargo.lock') != ''
        uses: dtolnay/rust-toolchain@beta
      - name: cargo update
        if: hashFiles('Cargo.lock') != ''
        run: cargo update
      - name: cargo test
        if: hashFiles('Cargo.lock') != ''
        run: cargo test --locked --all-features --all-targets
        env:
          RUSTFLAGS: -D deprecated
